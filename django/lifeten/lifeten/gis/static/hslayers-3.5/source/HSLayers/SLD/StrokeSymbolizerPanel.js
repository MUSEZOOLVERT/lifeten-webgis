/* Copyright (c) 2007-2010 Help Service - Remote Sensing s.r.o. * Author(s): Martin Vlk * * This file is part of HSLayers. * * HSLayers is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * any later version. * * HSLayers is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * *  See http://www.gnu.org/licenses/gpl.html for the full text of the *  license. */Ext.namespace("HSLayers.SLD");/** * Panel for edit stroke symbolizer properties * * @class HSLayers.SLD.StrokeSymbolizerPanel */HSLayers.SLD.StrokeSymbolizerPanel = Ext.extend(Ext.FormPanel, {    // **********************************************************************    // private members    // **********************************************************************    /**     * @private     * @name HSLayers.SLD.StrokeSymbolizerPanel.colorManager     * @type {Object}     */    colorManager: null,    /**     * @private     * @name HSLayers.SLD.StrokeSymbolizerPanel.dashStyles     * @type {Array of Array}     */    dashStyles: [        ["solid", "solid"],        ["4 4", "dash"],        ["2 4", "dot"]    ],    /**     * @private     * @name HSLayers.SLD.StrokeSymbolizerPanel.symbolizer     * @type {Object}     */    symbolizer: null,    /**     * @private     * @function     * @name HSLayers.SLD.StrokeSymbolizerPanel._getDashArray     * @param {String} style     * @return {Array}     */    _getDashArray: function(style) {        var array;        if (style) {            var parts = style.split(/\s+/);            var ratio = parts[0] / parts[1];            var array;            if (!isNaN(ratio)) {                array = ratio >= 1 ? "4 4" : "2 4"            }        }        return array;    },    // **********************************************************************    // public members    // **********************************************************************    /**     * @function     * @name HSLayers.SLD.StrokeSymbolizerPanel.initComponent     */    initComponent: function() {        if(!this.symbolizer) {            this.symbolizer = {};        }        if (this.colorManager) {            this.colorFieldPlugins = [new this.colorManager];        }        this.border = false;        this.items = [{            xtype: "fieldset",            title: "Stroke",            autoHeight: true,            checkboxToggle: (true && (! this.required)),            collapsed: (this.symbolizer.stroke === false ) || (!                (this.required || this.symbolizer.strokeDashstyle ||                this.symbolizer.strokeColor || this.symbolizer.strokeWidth ||                this.symbolizer.strokeOpacity)            ),            defaults: {                width: 100            },            items: [{                xtype: "combo",                name: "style",                fieldLabel: "Style",                store: new Ext.data.SimpleStore({                    data: this.dashStyles,                    fields: ["value", "display"]                }),                displayField: "display",                valueField: "value",                value: this._getDashArray(this.symbolizer["strokeDashstyle"]) || "solid",                mode: "local",                allowBlank: true,                triggerAction: "all",                editable: false,                listeners: {                    select: function(combo, record) {                        this.symbolizer["strokeDashstyle"] = record.get("value");                        this.fireEvent("change", this.symbolizer);                    },                    scope: this                }            }, {                xtype: "hslayers_colorfield",                name: "color",                fieldLabel: "Color",                value: this.symbolizer["strokeColor"],                plugins: this.colorFieldPlugins,                listeners: {                    valid: function(field) {                        this.symbolizer["strokeColor"] = field.getValue();                        this.fireEvent("change", this.symbolizer);                    },                    scope: this                }            }, {                xtype: "textfield",                name: "width",                fieldLabel: "Width",                value: this.symbolizer["strokeWidth"],                listeners: {                    change: function(field, value) {                        this.symbolizer["strokeWidth"] = value;                        this.fireEvent("change", this.symbolizer);                    },                    scope: this                }            }, {                xtype: "slider",                name: "opacity",                fieldLabel: "Opacity",                values: [(this.symbolizer["strokeOpacity"] == null) ? 100 : this.symbolizer["strokeOpacity"] * 100],                isFormField: true,                listeners: {                    changecomplete: function(slider, value) {                        this.symbolizer["strokeOpacity"] = value / 100;                        this.fireEvent("change", this.symbolizer);                    },                    scope: this                }            }],            listeners: {                collapse: function() {                    this.fireEvent("change", this.symbolizer);                },                expand: function() {                    this.fireEvent("change", this.symbolizer);                },                scope: this            }        }];        HSLayers.SLD.StrokeSymbolizerPanel.superclass.initComponent.call(this);    },    /**     * @function     * @name HSLayers.SLD.StrokeSymbolizerPanel.processSymbolizerAfterEdit     * @param {Object} symbolizer     */    processSymbolizerAfterEdit: function(symbolizer) {        if (! symbolizer) {            symbolizer = this.symbolizer;        }        if (this.get(0).collapsed) {            symbolizer.stroke = false;            delete symbolizer.strokeDashstyle;            delete symbolizer.strokeColor;            delete symbolizer.strokeWidth;            delete symbolizer.strokeOpacity;        } else {            symbolizer.stroke = true;        }    }});Ext.reg('hslayers_sld_strokesymbolizerpanel', HSLayers.SLD.StrokeSymbolizerPanel);