/* Copyright (c) 2007-2010 Help Service - Remote Sensing s.r.o./* Copyright (c) 2007-2010 Help Service - Remote Sensing s.r.o. * Author(s): Martin Vlk * * This file is part of HSLayers. * * HSLayers is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * any later version. * * HSLayers is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * *  See http://www.gnu.org/licenses/gpl.html for the full text of the *  license. */Ext.namespace("HSLayers.SLD");/** * Panel for edit unique symbols * * @class HSLayers.SLD.UniqueSymbolsPanel */HSLayers.SLD.UniqueSymbolsPanel = Ext.extend(Ext.Panel, {    // **********************************************************************    // private members    // **********************************************************************    /**     * @private     * @name HSLayers.SLD.UniqueSymbolsPanel.attributes     * @type {Ext.data.Store}     */    attributes: null,    /**     * @private     * @name HSLayers.SLD.UniqueSymbolsPanel.getValuesHandler     * @type Object     */    getValuesHandler: null,    /**     * @private     * @name HSLayers.SLD.UniqueSymbolsPanel._ruleContainer     * @type Ext.Panel     */    _ruleContainer: null,    /**     * @private     * @name HSLayers.SLD.UniqueSymbolsPanel.rules:     * @type Array of OpenLayers.Style     */    rules: null,    /**     * @private     * @name HSLayers.SLD.UniqueSymbolsPanel._symbolType     * @type String     */    symbolType: null,    /**     * @private     * @name HSLayers.SLD.UniqueSymbolsPanel._topPanel     * @type Ext.Panel     */    _topPanel: null,    /**     * @private     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel._addValue     * @param {String} value     */    _addValue: function(value) {        var newRule = new OpenLayers.Rule({            name: "symbol" + (this._ruleContainer.items.getCount() + 1),            symbolizer: {},            filter: new OpenLayers.Filter.Comparison({                type: OpenLayers.Filter.Comparison.EQUAL_TO,                property: this._getSelectedField(),                value: value || ""            })        });        newRule.symbolizer[this.symbolType] =            HSLayers.SLD.Util.generateDefaultSymbolizer(this.symbolType);        this.rules.push(newRule);        var symbologyRowField = new HSLayers.SLD.SymbologyRowField({            attributes: this.attributes,            rule: newRule,            symbolType: this.symbolType        });        this._ruleContainer.add(symbologyRowField);        this._ruleContainer.doLayout();    },    /**     * @private     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel._fillValues     */    _fillValues: function() {        if (this.getValuesHandler) {            var data = this.getValuesHandler.func.call(                this.getValuesHandler.scope || this, this, this._getSelectedField()            );            this._removeAllValue();            if (data instanceof Array) {                for (var i = 0; i < data.length; i++) {                    this._addValue(data[i]);                }            }        }    },    /**     * @private     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel._getToolbarConfig     * @returns {Object}     */    _getToolbarConfig: function() {        return {            xtype: "toolbar",            items: [{                text: "Add",                handler: function() {                    this._addValue();                },                scope: this            }, {                text: "Remove",                handler: function() {                    this._removeValue();                },                scope: this            }, {                text: "Remove all",                handler: function() {                    this._removeAllValue();                },                scope: this            }]        }    },    /**     * @private     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel._getSelectedField     * @returns {String}     */    _getSelectedField: function() {        return this._topPanel.getTopToolbar().get(1).getValue();    },    /**     * @private     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel._initAttributes     * @returns {String}     */    _initAttributes: function() {        if (this.attributes == null) {            this.attributes = new Ext.data.SimpleStore({                fields:["name","type","restriction"],                data:[]            });        }    },    /**     * @private     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel._removeValue     * @returns {String}     */    _removeValue: function() {        var i = 0;        while (i < this._ruleContainer.items.getCount()) {            var symbologyOneRowField = this._ruleContainer.get(i);            if (symbologyOneRowField.isChecked()) {                this.rules.remove(symbologyOneRowField.rule);                this._ruleContainer.remove(symbologyOneRowField);            } else {                i++;            }        }    },    /**     * @private     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel._removeAllValue     * @returns {String}     */    _removeAllValue: function() {        var i = 0;        while (i < this._ruleContainer.items.getCount()) {            var symbologyOneRowField = this._ruleContainer.get(i);            this.rules.remove(symbologyOneRowField.rule);            this._ruleContainer.remove(symbologyOneRowField);        }    },    // **********************************************************************    // public members    // **********************************************************************    /**     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel.initComponent     */    initComponent: function() {        this.hideLabels = true;        this._initAttributes();        var ruleItems = [];        for (var i = 0; i < this.rules.length; i++) {            ruleItems.push({                xtype: "hslayers_symbologyrowfield",                rule: this.rules[i],                symbolType: this.symbolType            });        }        this._topPanel = new Ext.Panel({            border: false,            tbar: [{                xtype: "tbtext",                text: "Field: "            }, {                xtype: "combo",                store: this.attributes,                editable: false,                mode: "local",                triggerAction: "all",                allowBlank: false,                displayField: "name",                valueField: "name",                value: this.attributes.getAt(0).get("name"),                listeners: {                    select: function(combo, record) {                        this.updateFieldForValues(record.get("name"));                    },                    scope: this                },                width: 120            }, {                xtype: "tbtext",                text: " ",                width: 120            }, {                text: "Fill values",                handler: function() {                    this._fillValues();                },                scope: this            }]        });        this._ruleContainer = new Ext.Panel({            layout: "form",            defaults: {anchor: "100%"},            bodyStyle: {"padding": "5px"},            border: false,            hideLabels: true,            items: ruleItems        });        this.items = [            this._topPanel,            this._ruleContainer,            this._getToolbarConfig()        ];        this.addEvents("onfillvalues");        HSLayers.SLD.UniqueSymbolsPanel.superclass.initComponent.call(this);    },    /**     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel.redrawSymbols     */    redrawSymbols: function() {        for (i = 0; i < this._ruleContainer.items.getCount(); i++) {            var symbologyOneRowField = this._ruleContainer.get(i);            symbologyOneRowField.redrawSymbol();        }    },    /**     * @function     * @name HSLayers.SLD.UniqueSymbolsPanel.updateFieldForValues     * @param {String} fieldName     */    updateFieldForValues: function(fieldName) {        for (i = 0; i < this._ruleContainer.items.getCount(); i++) {            var symbologyOneRowField = this._ruleContainer.get(i);            symbologyOneRowField.rule.filter.property = fieldName;        }    }});Ext.reg('hslayers_sld_uniquesymbolspanel', HSLayers.SLD.UniqueSymbolsPanel);