/* Copyright (c) 2007-2010 Help Service - Remote Sensing s.r.o. * Author(s): Martin Vlk * * This file is part of HSLayers. * * HSLayers is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * any later version. * * HSLayers is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * *  See http://www.gnu.org/licenses/gpl.html for the full text of the *  license. */Ext.namespace("HSLayers.SLD");/** * Panel for edit symbology for whole layer * * @class HSLayers.SLD.LayerSymbologyPanel */HSLayers.SLD.LayerSymbologyPanel = Ext.extend(Ext.Panel, {    // **********************************************************************    // private members    // **********************************************************************    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel.attributes     * @type Ext.data.Store     */    attributes: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel.getValuesHandler     * @type Object     */    getValuesHandler: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel._panelSingleSymbol     * @type HSLayers.SLD.SingleSymbolPanel     */    _panelSingleSymbol: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel._panelUniqueValue     * @type HSLayers.SLD.UniqueSymbolsPanel     */    _panelUniqueValue: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel._panelColoredQuantities     * @type Ext.Panel     */    _panelColoredQuantities: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel.sld     * @type OpenLayers.Style     */    sld: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel._styleSingleSymbol     * @type OpenLayers.Style     */    _styleSingleSymbol: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel._styleUniqueSymbol     * @type OpenLayers.Style     */    _styleUniqueSymbol: null,    /**     * @private     * @name HSLayers.SLD.LayerSymbologyPanel._symbolType     * @type String     */    symbolType: null,    /**     * @private     * @function     * @name HSLayers.SLD.LayerSymbologyPanel._createDefaultSingleSymbol     * @returns {OpenLayers.Style}     */    _createDefaultSingleSymbol: function() {        var style = new OpenLayers.Style();        style.name = HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_SINGLE;        var rule = new OpenLayers.Rule({            symbolizer: {}        });        rule.symbolizer[this._symbolType] =            HSLayers.SLD.Util.generateDefaultSymbolizer(this._symbolType);        style.addRules([rule]);        return style;    },    /**     * @private     * @function     * @name HSLayers.SLD.LayerSymbologyPanel._createDefaultUniqueSymbols     * @returns {OpenLayers.Style}     */    _createDefaultUniqueSymbols: function() {        var style = new OpenLayers.Style();        style.name = HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_UNIQUE;        return style;    },    /**     * @private     * @function     * @name HSLayers.SLD.LayerSymbologyPanel._initStyles     * @returns {Integer}     */    _initStyles: function() {        var actualStyleType = HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE;        if (! this.sld) {            this.sld = this._createDefaultSingleSymbol();        }        if (this.sld.name == HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_SINGLE) {            this._styleSingleSymbol = this.sld;            this._styleUniqueSymbols = this._createDefaultUniqueSymbols();            actualStyleType = HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE;        }        if (this.sld.name == HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_UNIQUE) {            this._styleSingleSymbol = this._createDefaultSingleSymbol();            this._styleUniqueSymbols = this.sld;            actualStyleType = HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE;        }        return actualStyleType;    },    // **********************************************************************    // public members    // **********************************************************************    /**     * @function     * @name HSLayers.SLD.LayerSymbologyPanel.afterShow     */    afterShow: function() {        this.updatePanelVisibility(this.radioGroupType.getValue().inputValue);    },    /**     * @function     * @name HSLayers.SLD.LayerSymbologyPanel.getSelectedStyle     * @returns {OpenLayers.Style}     */    getSelectedStyle: function() {        var style = null;        switch (this.radioGroupType.getValue().inputValue) {            case HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE:                style = this._styleSingleSymbol;                break;            case HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE:                style = this._styleUniqueSymbols;                break;        }        return style;    },    /**     * @function     * @name HSLayers.SLD.LayerSymbologyPanel.initComponent     */    initComponent: function() {        this.bodyStyle = {"padding": "10px"};        var actualStyleType = this._initStyles();        this._panelSingleSymbol = new HSLayers.SLD.SingleSymbolPanel({            attributes: this.attributes,            hidden: true,            rule: this._styleSingleSymbol.rules[0],            symbolType: this.symbolType        });        this._panelUniqueValue = new HSLayers.SLD.UniqueSymbolsPanel({            attributes: this.attributes,            hidden: true,            rules: this._styleUniqueSymbols.rules,            symbolType: this.symbolType,            getValuesHandler: this.getValuesHandler        });        this._panelColoredQuantities = new Ext.Panel({            title: "Colored quantities",            hidden: true        });        this.radioGroupType = new Ext.form.RadioGroup({            hideLabel: true,            items: [{                boxLabel: 'Single symbol',                name: 'rb-symbologyType',                inputValue: HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE,                checked: (actualStyleType == HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE)            }, {                boxLabel: 'Unique symbols',                name: 'rb-symbologyType',                inputValue: HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE,                checked: (actualStyleType == HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE),                disabled: this.attributes.empty            }, {                boxLabel: 'Colored quantities',                name: 'rb-symbologyType',                inputValue: HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_COLORED,                checked: (actualStyleType == HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_COLORED),                disabled: true            }],            listeners: {                change: function(radioGroup, radio) {                    this.updatePanelVisibility(radio.inputValue);                },                scope: this            }        });        this.items = [{            xtype: "fieldset",            title: "Symbology type",            items : [                this.radioGroupType            ]},            this._panelSingleSymbol, this._panelUniqueValue, this._panelColoredQuantities        ];        HSLayers.SLD.LayerSymbologyPanel.superclass.initComponent.call(this);    },    /**     * @function     * @name HSLayers.SLD.LayerSymbologyPanel.updatePanelVisibility     * @param {Integer} selectedSymbologyType     */    updatePanelVisibility: function(selectedSymbologyType) {        this._panelSingleSymbol.setVisible(selectedSymbologyType == HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE);        this._panelUniqueValue.setVisible(selectedSymbologyType == HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE);        this._panelColoredQuantities.setVisible(selectedSymbologyType == HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_COLORED);        switch (selectedSymbologyType) {            case HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE:                this._panelSingleSymbol.redrawSymbol();                break;            case HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE:                this._panelUniqueValue.redrawSymbols();                break;        }    }});/** * type of symbology * @static * @name HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE * @type {Integer} */HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_SINGLE = 1;/** * type of symbology * @static * @name HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE * @type {Integer} */HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_UNIQUE = 2;/** * type of symbology * @static * @name HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_COLORED * @type {Integer} */HSLayers.SLD.LayerSymbologyPanel.STYLE_CODE_COLORED = 3;/** * name of symbology * @static * @name HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_SINGLE * @type {String} */HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_SINGLE = "SINGLE_SYMBOL";/** * name of symbology * @static * @name HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_UNIQUE * @type {String} */HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_UNIQUE = "UNIQUE_SYMBOLS";/** * name of symbology * @static * @name HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_COLORED * @type {String} */HSLayers.SLD.LayerSymbologyPanel.STYLE_NAME_COLORED = "COLORED_SYMBOLS";Ext.reg('hslayers_sld_layersymbologypanel', HSLayers.SLD.LayerSymbologyPanel);