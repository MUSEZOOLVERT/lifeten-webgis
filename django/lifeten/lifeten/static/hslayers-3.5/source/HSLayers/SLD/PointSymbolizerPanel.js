/* Copyright (c) 2007-2010 Help Service - Remote Sensing s.r.o. * Author(s): Martin Vlk * * This file is part of HSLayers. * * HSLayers is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * any later version. * * HSLayers is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * *  See http://www.gnu.org/licenses/gpl.html for the full text of the *  license. */Ext.namespace("HSLayers.SLD");/** * Panel for edit point symbolizer properties * * @class HSLayers.SLD.PointSymbolizerPanel */HSLayers.SLD.PointSymbolizerPanel = Ext.extend(Ext.Panel, {    // **********************************************************************    // private members    // **********************************************************************    /**     * @private     * @name HSLayers.SLD.PointSymbolizerPanel.colorManager     * @type {Object}     */    colorManager: null,    /**     * @private     * @name HSLayers.SLD.PointSymbolizerPanel.defaultSymbolizer     * @type {Object}     */    defaultSymbolizer: {        "graphicName": "circle",        "rotation": 0,        "pointRadius": 3,        "fillColor": "#ffffff",        "fillOpacity": 1,        "strokeDashstyle": "solid",        "strokeOpacity": 1    },    /**     * @private     * @name HSLayers.SLD.PointSymbolizerPanel.external     * @type {String}     */    external: null,    /**     * @private     * @name HSLayers.SLD.PointSymbolizerPanel.pointGraphics     * @type {Array of Object}     */    pointGraphics: [        {display: "circle", value: "circle", mark: true},        {display: "square", value: "square", mark: true},        {display: "triangle", value: "triangle", mark: true},        {display: "star", value: "star", mark: true},        {display: "cross", value: "cross", mark: true},        {display: "x", value: "x", mark: true},        {display: "external"}    ],    /**     * @private     * @name HSLayers.SLD.PointSymbolizerPanel.symbolizer     * @type {Object}     */    symbolizer: null,    // **********************************************************************    // public members    // **********************************************************************    /**     * @function     * @name HSLayers.SLD.PointSymbolizerPanel.initComponent     */    initComponent: function() {        if(!this.symbolizer) {            this.symbolizer = {};        }        Ext.applyIf(this.symbolizer, this.defaultSymbolizer);        this.bodyStyle = {"padding": "10px"};        this.border = false;        this.layout = "form";        this.external = !!this.symbolizer["externalGraphic"];        this.urlField = new Ext.form.TextField({            name: "url",            fieldLabel: "URL",            value: this.symbolizer["externalGraphic"],            hidden: false,            listeners: {                change: function(field, value) {                    this.symbolizer["externalGraphic"] = value;                    this.fireEvent("change", this.symbolizer);                },                scope: this            },            width: 100        });        this.markPanel = new Ext.Panel({            border: false,            collapsed: this.external,            layout: "form",            items: [{                xtype: "hslayers_sld_fillsymbolizerpanel",                symbolizer: this.symbolizer,                labelWidth: this.labelWidth,                labelAlign: this.labelAlign,                colorManager: this.colorManager,                listeners: {                    change: function(symbolizer) {                        this.fireEvent("change", this.symbolizer);                    },                    scope: this                }            }, {                xtype: "hslayers_sld_strokesymbolizerpanel",                symbolizer: this.symbolizer,                labelWidth: this.labelWidth,                labelAlign: this.labelAlign,                colorManager: this.colorManager,                listeners: {                    change: function(symbolizer) {                        this.fireEvent("change", this.symbolizer);                    },                    scope: this                }            }]        });        this.graphicPanel = new Ext.Panel({            border: false,            collapsed: !this.external,            layout: "form",            items: [this.urlField, {                xtype: "slider",                name: "opacity",                fieldLabel: "Opacity",                value: [(this.symbolizer["graphicOpacity"] == null) ? 100 : this.symbolizer["graphicOpacity"] * 100],                isFormField: true,                listeners: {                    changecomplete: function(slider, value) {                        this.symbolizer["graphicOpacity"] = value / 100;                        this.fireEvent("change", this.symbolizer);                    },                    scope: this                },                width: 100            }]        });        this.items = [{            xtype: "combo",            name: "mark",            fieldLabel: "Symbol",            store: new Ext.data.JsonStore({                data: {root: this.pointGraphics},                root: "root",                fields: ["value", "display", "preview", {name: "mark", type: "boolean"}]            }),            value: this.external ? 0 : this.symbolizer["graphicName"],            displayField: "display",            valueField: "value",            tpl: new Ext.XTemplate(                '<tpl for=".">' +                    '<div class="x-combo-list-item hs-pointsymbolizer-mark-item">' +                    '<tpl if="preview">' +                        '<img src="{preview}" alt="{display}"/>' +                    '</tpl>' +                    '<span>{display}</span>' +                '</div></tpl>'            ),            mode: "local",            allowBlank: false,            triggerAction: "all",            editable: false,            listeners: {                select: function(combo, record) {                    var mark = record.get("mark");                    var value = record.get("value");                    if(!mark) {                        if(value) {                            this.urlField.hide();                            this.urlField.getEl().up('.x-form-item').setDisplayed(false);                            this.symbolizer["externalGraphic"] = value;                        } else {                            this.urlField.show();                            this.urlField.getEl().up('.x-form-item').setDisplayed(true);                        }                        if(!this.external) {                            this.external = true;                            this.updateGraphicDisplay();                        }                    } else {                        if(this.external) {                            this.external = false;                            delete this.symbolizer["externalGraphic"];                            this.updateGraphicDisplay();                        }                        this.symbolizer["graphicName"] = value;                    }                    this.fireEvent("change", this.symbolizer);                },                scope: this            },            width: 100        }, {            xtype: "textfield",            name: "size",            fieldLabel: "Size",            value: this.symbolizer["pointRadius"] * 2,            listeners: {                change: function(field, value) {                    this.symbolizer["pointRadius"] = value / 2;                    this.fireEvent("change", this.symbolizer);                },                scope: this            },            width: 100        }, {            xtype: "textfield",            name: "rotation",            fieldLabel: "Rotation",            value: this.symbolizer["rotation"],            listeners: {                change: function(field, value) {                    this.symbolizer["rotation"] = value;                    this.fireEvent("change", this.symbolizer);                },                scope: this            },            width: 100        }, this.markPanel, this.graphicPanel        ];        HSLayers.SLD.PointSymbolizerPanel.superclass.initComponent.call(this);    },    /**     * @function     * @name HSLayers.SLD.PointSymbolizerPanel.processSymbolizerAfterEdit     * @param {Object} symbolizer     */    processSymbolizerAfterEdit: function(symbolizer) {        if (! symbolizer) {            symbolizer = this.symbolizer;        }        this.markPanel.get(0).processSymbolizerAfterEdit(symbolizer);        this.markPanel.get(1).processSymbolizerAfterEdit(symbolizer);    },    /**     * @function     * @name HSLayers.SLD.PointSymbolizerPanel.updateGraphicDisplay     */    updateGraphicDisplay: function() {        if(this.external) {            this.markPanel.collapse();            this.graphicPanel.expand();        } else {            this.graphicPanel.collapse();            this.markPanel.expand();        }    }});Ext.reg('hslayers_sld_pointsymbolizerpanel', HSLayers.SLD.PointSymbolizerPanel);